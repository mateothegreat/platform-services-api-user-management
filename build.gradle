mainClassName = "platform.services.api.UsersApplication"

dependencies {

    compile project(":platform-services-api-commons")
    testCompile project(path: ':platform-services-api-commons', configuration: 'testOutput')
}

apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.bmuschko.docker-java-application'

docker {

    url = 'tcp://localhost:2375'

    registryCredentials {

        url = 'streamingplatform.azurecr.io'

        username = 'streamingplatform'
        password = 'i=/8/r7/O+/Mv/=u/+heJ=nh0=iTQou7'

    }
    javaApplication {

        baseImage = 'openjdk:8-jdk-alpine'
        maintainer = 'Matthew Davis <matthew@appsoa.io>'

        ports = [8080, 9000]

    }

}


import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

task bootRepackage_copyJar(type: Copy) {

    group 'app'

    dependsOn bootRepackage

    print "Copying Jar from build/libs/${project.name}-${project.version}.jar"

    from "build/libs/${project.name}-${project.version}.jar"
    into 'build/docker'

}
task docker_file_create(type: Dockerfile) {

    group 'app'

    destFile = project.file('build/docker/Dockerfile')

    from 'openjdk:8-jdk-alpine'

    exposePort(8080, 9000)

    maintainer 'Matthew Davis <matthew@appsoa.io>'

    workingDir('/')

    addFile("${project.name}-${project.version}.jar", "${project.name}-${project.version}.jar")

    entryPoint("java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/${project.name}-${project.version}.jar")

}
task docker_image_build(type: DockerBuildImage) {

    group 'app'

    dependsOn docker_file_create, bootRepackage_copyJar

    inputDir = file('build/docker')

    tag = project.group + "/" + project.name + ":" + project.version

    print 'Building docker image: ' + tag

    doLast {

        file('.docker.image.id').text = imageId

    }

}
task docker_container_stop(type: DockerStopContainer) {

    group 'app'

    onlyIf { file('.docker.container.id').exists() }

    targetContainerId { file('.docker.container.id').text }

}
task docker_container_remove(type: DockerRemoveContainer) {

    group 'app'

    mustRunAfter 'docker_container_stop'

    dependsOn docker_container_stop

    onlyIf { file('.docker.container.id').exists() }
    doLast { delete file('.docker.container.id') }

    targetContainerId { file('.docker.container.id').text }
//    targetContainerId { docker_container_create.getContainerId() }

}
task docker_image_remove(type: DockerRemoveImage) {

    group 'app'

    dependsOn docker_container_remove

    onlyIf {

        file('.docker.image.id').exists()

        print 'Removing docker image: ' + file('.docker.image.id').text

        targetImageId { file('.docker.image.id').text.trim() }

        force = true

    }

    doLast {


        file('.docker.image.id').text = imageId
        delete file('.docker.image.id')

    }

}
task docker_container_create(type: DockerCreateContainer) {

    group 'app'

    dependsOn docker_image_build
    dependsOn docker_container_remove

    containerId = jar.baseName
    containerName = jar.baseName

    targetImageId { docker_image_build.getImageId() }

    portBindings = ['8080:8080', '9000:9000']

    doLast {

        file('.docker.container.id').text = containerId

    }

}
task docker_container_start(type: DockerStartContainer) {

    group 'app'

    mustRunAfter 'docker_container_create'

    dependsOn docker_container_create

    targetContainerId { docker_container_create.getContainerId() }

}
task docker_container_restart(type: DockerRestartContainer) {

    group 'app'

    targetContainerId { docker_container_create.getContainerId() }

}
task docker_container_start_and_logs(type: DockerLogsContainer) {

    group 'app'

    dependsOn docker_container_start

    targetContainerId { docker_container_create.getContainerId() }

    follow = true
    tailAll = true

    onNext { message ->

        logger.quiet message.toString() // each log message from the container will be passed as it's made available

    }

}
task docker_logs(type: DockerLogsContainer) {

    group 'app'

    targetContainerId { docker_container_create.getContainerId() }

    follow = true
    tailAll = true

    onNext { message ->

        logger.quiet message.toString() // each log message from the container will be passed as it's made available

    }

}
task docker_azure_image_tag(type: DockerTagImage) {

    group 'app'

    dependsOn docker_image_build

    force = true

    imageId = docker_image_build.getTag()

    repository = "$docker.registryCredentials.url/$project.name"

    tag = "$project.version"

}
task docker_azure_push_image(type: DockerPushImage) {

    group 'app'

    dependsOn docker_azure_image_tag

    imageName = "$docker.registryCredentials.url/$project.name"
}
